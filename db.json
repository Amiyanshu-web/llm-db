{
  "data": [
    {
      "id": 1,
      "name": "Hugging Face Transformers",
      "image": "https://huggingface.co/front/assets/huggingface_logo-noborder.svg",
      "category": "Natural Language Processing",
      "description": "Hugging Face Transformers is a state-of-the-art general-purpose library for Natural Language Processing (NLP). It provides thousands of pretrained models to perform tasks on texts such as classification, information extraction, summarization, translation, text generation, etc.",
      "provider": "Hugging Face",
      "code_snippet": "python\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\nmodel = AutoModelForSequenceClassification.from_pretrained(\"bert-base-uncased\")\n\ninputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")",
      "use_cases": [
        "Text Classification",
        "Named Entity Recognition",
        "Question Answering",
        "Sentiment Analysis",
        "Translation"
      ]
    },
    {
      "id": 2,
      "name": "TensorFlow Text",
      "image": "https://www.gstatic.com/devrel-devsite/prod/vdd667e8703bf3eb3250e728f4f199ed0baf72dd7a2c58290f8fa685e2652be47/tensorflow/images/lockup.svg",
      "category": "Natural Language Processing",
      "description": "TensorFlow Text is a collection of text processing utilities including tokenization, stemming, and other common natural language processing (NLP) operations. TensorFlow Text makes these tools available via eager execution enabling developers to build scalable NLP applications quickly without worrying about performance.",
      "provider": "Google / TensorFlow",
      "code_snippet": "python\nimport tensorflow_text as tf_text\n\nsentence = \"This is an apple pie recipe. You need flour, sugar, apples\"\nwords = tf_text.whitespace_split(sentence)\nprint(words)\n",
      "use_cases": [
        "Data Preprocessing",
        "Text Normalization",
        "Text Feature Extraction",
        "Tokenization"
      ]
    },
    {
      "id": 3,
      "name": "spaCy",
      "image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQnrUJ4JUiMZeIXJO_kHKwlZdzbseAhD-ACM_bEzd7B3A&s",
      "category": "Natural Language Processing",
      "description": "spaCy is a free, open-source library for advanced Natural Language Processing (NLP) in Python. It's designed specifically for production use and helps you build applications that process and understand large volumes of text data.",
      "provider": "Explosion AI",
      "code_snippet": "python\nimport spacy\nnlp = spacy.load('en_core_web_sm')\ndoc = nlp(\"Apple pie recipe.\")\nfor ent in doc.ents:\n\tprint(ent.text, ent.label_)\n",
      "use_cases": [
        "Dependency Parsing",
        "Information Extraction",
        "Named Entity Recognition",
        "Part-Of-Speech Tagging",
        "Syntax Parsing"
      ]
    },
    {
      "id": 4,
      "name": "Gensim",
      "image": "https://riverbankcomputing.com.s3.amazonaws.com/software/gensim/logos/gensim_logo.png",
      "category": "Natural Language Processing",
      "description": "Gensim is a robust open-source vector space modeling and topic modeling toolkit implemented in Python. It uses NumPy, SciPy and optional Cython for performance. Gensim is particularly good at handling large text collections, like Wikipedia or news datasets.",
      "provider": "Radim Řehůřek & company",
      "code_snippet": "python\nfrom gensim.models import Word2Vec\n\nsentences = [\n['this', 'is', 'the', 'first', 'sentence'],\n['this', 'is', 'the', 'second', 'sentence'],\n]\n\nmodel = Word2Vec(sentences=sentences, min_count=1)\n\nprint(model.wv['sentence'])\n",
      "use_cases": [
        "Topic Modeling",
        "Document Similarity",
        "Word Embeddings"
      ]
    },
    {
      "id": 5,
      "name": "YOLO v4",
      "image": "https://pjreddie.com/media/image/yologo_2.png",
      "category": "Computer Vision",
      "description": "Real-time object detection system capable of detecting multiple objects within an image with high accuracy and speed.",
      "provider": "Joseph Redmon et al.",
      "example_code_snippet": "C++\n#include <opencv2/opencv.hpp>\n#include <opencv2/dnn.hpp>\n\nvoid detectObjects(cv::Mat& image) {\n cv::dnn::Net net = cv::dnn::readNetFromDarknet(\"yolov4.cfg\", \"yolov4.weights\");\n std::vector<std::string> layersNames = net.getLayerNames();\n net.setInput(cv::dnn::blobFromImage(image, 1 / 255.0, cv::Size(416, 416), cv::Scalar(0, 0, 0), true, false));\n std::vector<cv::Mat> outputs;\n net.forward(outputs, layersNames);\n // Process outputs...\n}",
      "use_cases": [
        "Object detection in surveillance videos",
        "Real-time traffic monitoring"
      ]
    },
    {
      "id": 6,
      "name": "ResNet-50",
      "image": "https://www.mathworks.com/images/responsive/global/pic-header-mathworks-logo2.svg",
      "category": "Image Classification",
      "description": "Deep residual network architecture with 50 layers used primarily for image recognition and classification tasks.",
      "provider": "Microsoft Research",
      "example_code_snippet": "Python\nfrom tensorflow.keras.applications import ResNet50\n\n# Load pre-trained ResNet-50 model\nmodel = ResNet50(weights='imagenet')\n\n# Preprocess input image\nimg = preprocess_input(image)\n\n# Predict class probabilities\npredictions = model.predict(img)",
      "use_cases": [
        "Identifying objects in images",
        "Medical image analysis"
      ]
    },
    {
  "id": 7,
  "name": "VGG-16",
  "image": "https://www.mathworks.com/images/responsive/global/pic-header-mathworks-logo2.svg",
  "category": "Image Classification",
  "description": "Convolutional neural network architecture with 16 layers, mainly utilized for visual recognition challenges.",
  "provider": "Oxford Visual Geometry Group",
  "example_code_snippet": "Python\nfrom keras.applications.vgg16 import VGG16\n\n# Load pre-trained VGG-16 model\nmodel = VGG16(weights='imagenet')\n\n# Preprocess input image\nimg = preprocess_input(image)\n\n# Predict class probabilities\npredictions = model.predict(img)",
  "use_cases": [
    "Image recognition in social media",
    "Plant species identification"
  ]
}
],
  "featured": [
  {
    "id": 13,
    "name": "ChatGPT",
    "image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQIQaInK4DqLH8szalaA2-bBUHz2toGRo8VW9G2uzGb5w&s",
    "category": "Natural Language Processing",
    "description": "ChatGPT is an AI model developed by OpenAI for generating human-like text responses. It is trained on a diverse range of internet text and is capable of engaging in conversation on various topics.",
    "provider": "OpenAI",
    "use_cases": [
      "Conversational Agents",
      "Text Generation",
      "Customer Support Chatbots"
    ],
    "code_snippet": "python\nfrom transformers import GPT2LMHeadModel, GPT2Tokenizer\n\n# Load pretrained model and tokenizer\nmodel = GPT2LMHeadModel.from_pretrained('gpt2')\ntokenizer = GPT2Tokenizer.from_pretrained('gpt2')\n\n# Generate text\ninput_text = 'How are you?'\ninput_ids = tokenizer.encode(input_text, return_tensors='pt')\noutput_ids = model.generate(input_ids, max_length=100, num_return_sequences=1)\noutput_text = tokenizer.decode(output_ids[0], skip_special_tokens=True)\nprint(output_text)"
  },
  {
    "id": 14,
    "name": "TensorFlow",
    "image": "https://www.gstatic.com/devrel-devsite/prod/vdd667e8703bf3eb3250e728f4f199ed0baf72dd7a2c58290f8fa685e2652be47/tensorflow/images/lockup.svg",
    "category": "Machine Learning Framework",
    "description": "TensorFlow is an open-source machine learning framework developed by Google. It provides a comprehensive ecosystem of tools, libraries, and community resources for building and deploying machine learning models.",
    "provider": "Google",
    "use_cases": [
      "Deep Learning",
      "Neural Networks",
      "Image Recognition"
    ],
    "code_snippet": "python\nimport tensorflow as tf\n\n# Example code using TensorFlow\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(10, activation='relu', input_shape=(784,)),\n    tf.keras.layers.Dense(10)\n])\nmodel.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])"
  },
  {
    "id": 15,
    "name": "Stable Diffusion",
    "image": "https://tooldirectory.ai/_next/image?url=https%3A%2F%2Fstriking-kindness-e0d93214bb.media.strapiapp.com%2FStable_Diffusion_logo_2b68efd6c7.png&w=1920&q=72",
    "category": "Natural Language Processing",
    "description": "Stable Diffusion is a probabilistic generative model that can generate high-quality natural language text. It utilizes a diffusion process to iteratively refine its predictions, resulting in coherent and diverse text generation.",
    "provider": "Stable Diffusion",
    "use_cases": [
      "Text Generation",
      "Data Augmentation",
      "Content Creation"
    ],
    "code_snippet": "python\nfrom stablediffusion import StableDiffusion\n\n# Example usage of Stable Diffusion\nmodel = StableDiffusion()\ninput_text = 'The cat sat on the mat.'\ngenerated_text = model.generate_text(input_text, max_length=100)"
  }
]
}
